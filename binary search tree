
public class BinarySearchTree {
    static class Node {
        int val;
        Node left;
        Node right;
        public Node (int data) {
            this.val = data;
            left = null;
            right = null;
        }
    }
    // Insert
    public static Node insert(Node root, int val){
        if(root == null) {
        root = new Node(val);
        return root;
        }
        
        if(root.val > val) {
            root.left = insert(root.left, val);
        }else {
            root.right = insert(root.right, val);
        }
        return root;
    }
    
    // inorder travel
    public static void inorder (Node root){
        if(root == null){
            return;
        }
        inorder(root.left);
        System.out.print(root.val);
        inorder(root.right);
    }
    
    // Search
    public static boolean search(Node root, int key){
        if(root == null) {
            return false;
        }
        
        if(root.val > key){
            return search(root.left, key);
        }else if(root.val == key){
            return true;
        } else{
            return search(root.right, key);
        }
    }
    
    // Delete
    public static Node delete(Node root, int value){
        if(root.val > value){
            root.left = delete(root.left, value);
        } else if(root.val < value){
            root.right = delete(root.right, value);
        } else{
            if(root.left == null && root.right == null){
                return null;
            }
            
            if(root.left == null){
                return root.right;
            } else if (root.right == null){
                return root.left;
            }
            
            Node IS = inorderSuccessor(root.right);
            root.val = IS.val;
           root.right = delete(root.right, IS.val);
        }
        return root;
    }
    
    // Find inorder Successor
    public static Node inorderSuccessor(Node root){
        while(root.left != null) {
            root = root.left;
        }
        return root;
    }
    
    public static void main(String[] args) {
        int value[] = {5,1,3,4,2,7};
        Node root = null;
        for(int i = 0; i < value.length; i++){
            root = insert(root, value[i]);
        }
       delete(root, 5) ;
      inorder(root);  
       //System.out.println(root);
      // boolean n = search(root, 7);
        //System.out.print(n);
        
        
    }
    
}