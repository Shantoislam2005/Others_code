import java.util.*;
public class BinaryTrees {
  static  class Node {
        int val;
        Node left;
        Node right;
        
        public Node(int data) {
            this.val = data;
            this.left = null;
            this.right = null;
        }
    }
    
    static class BinaryTree{
        static int idx = -1;
        // Pre Order Travel
        public static void preOrder(Node root){
            if(root == null){
                return;
            }
            System.out.print(root.val);
            preOrder(root.left);
            preOrder(root.right);
        }
        // In Order travel
        public static void inOrder(Node root){
            if(root == null) {
                return;
            }
            inOrder(root.left);
            System.out.print(root.val);
            inOrder(root.right);
        }
        // post Order travel
        public static void postOrder(Node root){
            if(root == null){
                return;
            }
            postOrder(root.left);
            postOrder(root.right);
            System.out.print(root.val);
        }
        // Level order travel
        public static void levelOrder(Node root){
            if(root == null){
                return;
            }
            Queue <Node> q = new LinkedList <>();
            q.add(root);
            q.add(null);
            
            while(!q.isEmpty()){
                Node currNode = q.remove();
                if(currNode == null) {
                    System.out.println();
                    if(q.isEmpty()){
                        break;
                    } else {
                        q.add(null);
                    }
                }else {
                    System.out.print(currNode.val);
                    if(currNode.left != null) {
                        q.add(currNode.left);
                    }
                    if(currNode.right != null) {
                        q.add(currNode.right);
                    }
                }
            }
        }
        // Count of nodes
        public static int countOfNode(Node root){
            if(root == null){
                return 0;
            }
            int left = countOfNode(root.left);
            int right = countOfNode(root.right);
            return left + right + 1;
        }
          // Count of total value
        public static int countOfValue(Node root){
            if(root == null){
                return 0;
            }
            int left = countOfValue(root.left);
            int right = countOfValue(root.right);
            return left + right + root.val;
        }
          // Hight of tree
        public static int Hight(Node root){
            if(root == null){
                return 0;
            }
            int left = Hight(root.left);
            int right = Hight(root.right);
            int hight = Math.max(left, right) +1;
            return hight;
        }
          // Diameter of tree
        public static int Diameter(Node root){
            if(root == null){
                return 0;
            }
            int left = Diameter(root.left);
            int right = Diameter(root.right);
            int total = Hight(root.left) + Hight(root.right) + 1;
            return Math.max(total, Math.max(left, right));
        }
        
        // Build Tree
        public static Node BuildTree(int nodes[]){
            idx++;
            if(nodes[idx] == -1){
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = BuildTree(nodes);
            newNode.right = BuildTree(nodes);
            return newNode;
        }
    }
    
    
    public static void main(String[] args) {
     int node[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};  
        BinaryTree tree = new BinaryTree();
        Node root = tree.BuildTree(node);
        System.out.println(root.val);
        //tree.preOrder(root);
       // tree.inOrder(root);
       // tree.postOrder(root);
       // tree.levelOrder(root);
        int n = tree.Diameter(root);
        System.out.print(n);
    }
    
}